/* eslint-disable no-console */
import fs from 'fs';
import path from 'path';
import {
  TColorPalette,
  TDesignTokens,
  designTokens,
} from '../../libs/common/src/shared/constants';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è camelCase –≤ kebab-case
const camelToKebab = (str: string): string => {
  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
const generateCssVariables = (palette: TColorPalette, prefix = ''): string => {
  let cssVariables = '';

  Object.entries(palette).forEach(([key, value]) => {
    const cssVarName = `--${prefix}${camelToKebab(key)}`;
    cssVariables += `  ${cssVarName}: ${value};\n`;
  });

  return cssVariables;
};

export const generateLessVariables = (tokens: TDesignTokens): string => {
  let lessContent = '// Auto-generated from TypeScript\n\n';

  // –†–∞–∑–º–µ—Ä—ã
  Object.entries(tokens.spacing).forEach(([key, value]) => {
    lessContent += `@spacing-${key}: ${value}px;\n`;
  });

  lessContent += '\n';

  // –†–∞–¥–∏—É—Å—ã
  Object.entries(tokens.borderRadius).forEach(([key, value]) => {
    lessContent += `@border-radius-${key}: ${value}px;\n`;
  });

  lessContent += '\n';

  // CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º
  lessContent += `:root {\n`;
  lessContent += generateCssVariables(tokens.colors.light);
  lessContent += `}\n\n`;

  lessContent += `[data-theme="dark"] {\n`;
  lessContent += generateCssVariables(tokens.colors.dark);
  lessContent += `}`;

  return lessContent;
};

const workspaceRoot = path.resolve(__dirname, '../../../../../');
console.log('üìÅ Workspace root:', workspaceRoot);

const outputPath = path.join(
  workspaceRoot,
  'libs/common/src/styles/global.less'
);
console.log('üìÑ Output path:', outputPath);

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, {recursive: true});
  console.log('üìÅ Created directory:', outputDir);
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
const lessContent = generateLessVariables(designTokens);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
fs.writeFileSync(outputPath, lessContent);

console.log('‚úÖ Less variables generated to:', outputPath);
console.log('üìÑ File size:', lessContent.length, 'bytes');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
if (fs.existsSync(outputPath)) {
  console.log('‚úÖ File successfully created!');
} else {
  console.log('‚ùå File was not created!');
}

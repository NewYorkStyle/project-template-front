import fs from 'fs';
import path from 'path';

import {
  type TColorPalette,
  type TDesignTokens,
  designTokens,
} from '../../src/shared/lib/constants/design-tokens';
import {fileURLToPath} from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è camelCase –≤ kebab-case
const camelToKebab = (str: string): string => {
  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
const generateCssVariables = (palette: TColorPalette, prefix = ''): string => {
  let cssVariables = '';

  Object.entries(palette).forEach(([key, value]) => {
    const cssVarName = `--${prefix}${camelToKebab(key)}`;
    cssVariables += `  ${cssVarName}: ${value};\n`;
  });

  return cssVariables;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Less –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const generateLessVariables = (tokens: TDesignTokens): string => {
  let lessContent = '// Auto-generated from TypeScript\n\n';

  // –û—Ç—Å—Ç—É–ø—ã
  lessContent += '// –û—Ç—Å—Ç—É–ø—ã\n';
  Object.entries(tokens.spacing).forEach(([key, value]) => {
    lessContent += `@spacing-${key}: ${value}px;\n`;
  });

  lessContent += '\n';

  // –†–∞–¥–∏—É—Å—ã
  lessContent += '// –†–∞–¥–∏—É—Å—ã —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è\n';
  Object.entries(tokens.borderRadius).forEach(([key, value]) => {
    lessContent += `@border-radius-${key}: ${value}px;\n`;
  });

  lessContent += '\n';

  // –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
  lessContent += '// –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞\n';
  Object.entries(tokens.textSise).forEach(([key, value]) => {
    lessContent += `@text-size-${key}: ${value}px;\n`;
  });

  lessContent += '\n';

  // –ë—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã
  lessContent += '// –ë—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã\n';
  Object.entries(tokens.breakpoints).forEach(([key, value]) => {
    lessContent += `@breakpoint-${camelToKebab(key)}: ${value}px;\n`;
  });

  return lessContent;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Less —Ñ–∞–π–ª–∞ —Å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
const generateGlobalLess = (tokens: TDesignTokens): string => {
  let lessContent = '// Auto-generated from TypeScript\n\n';

  // –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  lessContent += `@import './variables.less';\n\n`;

  lessContent += `body {
  padding: 0;
  margin: 0;
}

`;

  // CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º
  lessContent += `:root {\n`;
  lessContent += generateCssVariables(tokens.colors.light);
  lessContent += `}\n\n`;

  lessContent += `[data-theme="dark"] {\n`;
  lessContent += generateCssVariables(tokens.colors.dark);
  lessContent += `}`;

  return lessContent;
};

const workspaceRoot = path.resolve(__dirname, '../../');
console.log('üìÅ Workspace root:', workspaceRoot);

const stylesDir = path.join(workspaceRoot, 'src/app/styles');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(stylesDir)) {
  fs.mkdirSync(stylesDir, {recursive: true});
  console.log('üìÅ Created directory:', stylesDir);
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º variables.less
const variablesPath = path.join(stylesDir, 'variables.less');
const variablesContent = generateLessVariables(designTokens);
fs.writeFileSync(variablesPath, variablesContent);
console.log('‚úÖ Less variables generated to:', variablesPath);
console.log('üìÑ Variables file size:', variablesContent.length, 'bytes');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º global.less
const globalPath = path.join(stylesDir, 'global.less');
const globalContent = generateGlobalLess(designTokens);
fs.writeFileSync(globalPath, globalContent);
console.log('‚úÖ Global less generated to:', globalPath);
console.log('üìÑ Global file size:', globalContent.length, 'bytes');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
if (fs.existsSync(variablesPath) && fs.existsSync(globalPath)) {
  console.log('‚úÖ Both files successfully created!');
} else {
  console.log('‚ùå Some files were not created!');
}
